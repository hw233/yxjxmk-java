//***************************************************************************
//* 作者= 左应
//* 创建时间= 2016-03-14
//* 用途= 竞技场
//***************************************************************************/
package pomelo.area;
import 'common.proto';


message ArenaInfoRequest {
}

message ArenaInfoResponse {
  required int32    s2c_code = 1;
  optional string   s2c_msg = 2;
  optional int32    s2c_singleRank = 3;  //竞技场单天排名,为0表示没有排名
  optional int32    s2c_totalRank = 4;   //上赛季排名, 为0表示没有排名
  optional int32    s2c_singleReward = 5; //单天排名奖励，0-不可领取 1-可领取 2-已领取
  optional int32    s2c_totalReward = 6; // 上赛季排名奖励，0-不可领取 1-可领取 2-已领取
  optional int32    s2c_currentTotalRank = 7; // 当前赛季排名,为0表示没有排名
  optional int32    s2c_currentTotalScore = 8; // 当前赛季分数
  optional int64    s2c_seasonEndTime = 9;      // 赛季结束时间
}

message EnterArenaAreaRequest {
}

message EnterArenaAreaResponse{
  required int32  s2c_code = 1;
  optional string s2c_msg = 2;  
}

message LeaveArenaAreaRequest {
}

message LeaveArenaAreaResponse{
  required int32  s2c_code = 1;
  optional string s2c_msg = 2;
}

message ArenaRewardRequest{
  required int32 c2s_type = 1; // 1 领取单场奖励，2 领取当日排名奖励
}

message ArenaRewardResponse{
  required int32  s2c_code = 1;
  optional string s2c_msg = 2;
}

message ArenaBattleScore{
  required string name = 1; //玩家名称
  required int32 score = 2; //分数
  required int32 pro = 3; //玩家职业
  optional string id = 4; //玩家id
}

message OnArenaBattleInfoPush{
  required int32  s2c_code = 1;
  required int32 s2c_killCount = 2; //连杀次数
  required int32 s2c_index = 3; //当前排名
  required int32 s2c_score=4;//当前积分
  repeated ArenaBattleScore s2c_scores = 5; //积分排名
  required int32 s2c_playerCount = 6; //参与人数
  repeated ArenaBattleScore s2c_killCountList = 7; //连杀排名列表
}


message OnArenaBattleEndPush{
  required int32  s2c_code = 1;
  required int32 outtime = 2;// 强制退出时间
}

service arenaHandler {
  // 请求竞技场界面
  rpc arenaInfoRequest(ArenaInfoRequest) returns(ArenaInfoResponse);
  // 请求进入竞技场场景
  rpc enterArenaAreaRequest(EnterArenaAreaRequest) returns(EnterArenaAreaResponse);
  // 请求离开竞技场场景
  rpc leaveArenaAreaRequest(LeaveArenaAreaRequest) returns(LeaveArenaAreaResponse);
  // 请求领取奖励
  rpc arenaRewardRequest(ArenaRewardRequest) returns(ArenaRewardResponse);
}

// 竞技场消息推送
service arenaPush {
  // 当前战斗信息更新
  rpc onArenaBattleInfoPush(OnArenaBattleInfoPush) returns(Void);
  // 竞技场战斗结束
  rpc onArenaBattleEndPush(OnArenaBattleEndPush) returns(Void);
}
